##############################################################
##                   SPASSO                  vs 0.0.0beta  ###
##############################################################
##  This  file  is  free software ;  it  is distributed  in  #
##  the hope that  it  will  be  useful,  but  without  any  #
##  warranty.  You  can  redistribute  it and/or modify  it  #
##  under  the  terms  of  the  GNU  General Public License  #
##  as  published  by  the   Free  Software  Foundation  at  #
##       http://www.gnu.org/copyleft/gpl.html                #
##############################################################
#                  all_lagrangian_figs.py
#
# Python script for plotting Lagrangian diagnostics
#
# Input: .mat file containing output from MAIN_Lagrangian.py
#        station_coord.txt and waypoints_coord.txt files
#
# Output: .png files with maps of (some or all) diagnostics
#	  use 'keys' to decide which ones are plotted 	  
#
##############################################################
# 30/09/2016: ADP&AD: creation 
#
# Credits: alice.dellapenna@mio.osupytheas.fr
#          andrea.doglioli@univ-amu.fr
###############################################################
import matplotlib
matplotlib.use('Agg')
import sys #to have argument in the script call
import cmocean as cm_oc
#import colormaps as cmaps
import csv #command open for text files
import matplotlib.rcsetup as rcsetup
import numpy as np
import scipy.io as sio #to read .mat files
import matplotlib.pyplot as plt
from matplotlib.dates import DayLocator, HourLocator, DateFormatter, drange
import matplotlib
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import glob #to obtain file paths
from mpl_toolkits.basemap import Basemap #to plot maps
from matplotlib.patches import Polygon
from mpl_toolkits.axes_grid1 import make_axes_locatable
#############################################
args=sys.argv
### TEST MODE 
if len(args)==1:
        dir_wrk='/home/doglioli/SPASSO/Cruises/PEACETIME/Wrk'
        dir_cruise='/home/doglioli/SPASSO/Cruises/PEACETIME'
### OPERATIONAL MODE
else:
        dir_wrk=sys.argv[1]
        dir_cruise=sys.argv[2]
	print('all_lagrangian_figs operational mode')
#--END if len(args)<1:
#############################################
#  Labels for each figure

figure_keys=['NYYYYYN']
figure_labels=['OW_disp','OW_param','FSLE','Lon_adv','Lat_adv','AVISO_vel','Time_From_Bathy [day]'];

#  Load data

# files with Lagrangian diagnostics have the structure of date_product_d0/d6. glob looks for a sequence of 8 numbers, followed by a string and d+a number - ADP
filename=dir_wrk+'/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_*d[0-9].mat'
#print(filename)
filelist=glob.glob(filename)
filemat=filelist[0]


if len(filelist)<0: 
   print('FILE: '+filename+'.mat NOT FOUND!')

execfile(dir_cruise+"/domain_limits.py")

#  Extracts all the common variables 

variables=sio.loadmat(filemat)
long=variables['long']
latg=variables['latg']
day0=variables['day0'] # SPASSO extracts the day to write the figure titles
filefigbase="%02d%02d%02d" % (day0[0,0],day0[0,1],day0[0,2])  # here I need to do something about the different lengths of the product name

#load the cruise stations
dico_stations=open(dir_cruise+'/station_coord.txt')
lon_stations=[]
lat_stations=[]
for line in dico_stations:
    xx,yy=line.split()
    lat_stations.append(float(xx))
    lon_stations.append(float(yy))

#load the cruise waypoints
dico_waypoint=open(dir_cruise+'/waypoint_coord.txt')
lon_waypoint=[]
lat_waypoint=[]
for line in dico_waypoint:
    xxx,yyy=line.split()
    lat_waypoint.append(float(xxx))
    lon_waypoint.append(float(yyy))

#  Defines the map

mymap=Basemap(projection='merc',llcrnrlat=Lat[0],urcrnrlat=Lat[1],llcrnrlon=Lon[0],urcrnrlon=Lon[1],resolution='h')#equivalent to m_proj
#project the data on the figure axis
x, y = mymap(long, latg) #[km]
#project the stations on the figure axis
x_stations,y_stations = mymap(lon_stations,lat_stations)
#project the waypoint on the figure axis
x_waypoint,y_waypoint = mymap(lon_waypoint,lat_waypoint)

#  Plots the wanted variables

for ii in range(0,7):
	
	if figure_keys[0][ii] in 'Y':
		
		if ii==0:
			OWdispersion_bi=variables['OWdispersion_bi']
			fig1=plt.figure()
			cax1=mymap.pcolormesh(x,y,OW_dispersion_bi,cmap=cm_oc.cm.deep_r,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='w',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='w',zorder=1)
			#add the colorbar
			cbar1=fig1.colorbar(cax1, orientation='vertical',shrink=0.6)
			cax1.set_clim(1,20)
			cbar1=fig1.colorbar(cax1,ticks=[5,10,15,20], orientation='vertical',shrink=0.9)
			cbar1.ax.set_ylabel('Eddy retention [d]')
			#add the title
			filefig1=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig1)

		
		if ii==1:
			owmi=variables['owmi']
			fig2=plt.figure()
			cax2=mymap.pcolormesh(x,y,(60*60*24)**2*owmi,cmap=cm_oc.cm.balance,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='m',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='m',zorder=1)
			#add the colorbar
			cbar2=fig2.colorbar(cax2, orientation='vertical',shrink=0.6)
			cax2.set_clim(-0.3,0.3)
			cbar2.ax.set_ylabel('Okubo-Weiss [d$^{-2}$]')
			#add the title
			filefig2=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig2)


		if ii==2:
			fsle=variables['lambda']
			fig3=plt.figure()
			cax3=mymap.pcolormesh(x,y,-60*60*24*fsle,cmap=cm_oc.cm.thermal,zorder=-1,vmin=fslemin,vmax=fslemax)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='w',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='w',zorder=1)
			#add the colorbar
			cax3.set_clim(0,0.1)
			cbar3=fig3.colorbar(cax3, orientation='vertical',shrink=0.9)
			cbar3.ax.set_ylabel('FSLE [d$^{-1}$]')
			#add the title
			
			filefig3=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig3)

		if ii==3:
			lonf15=variables['lonf15']
			fig4=plt.figure()
			cax4=mymap.pcolormesh(x,y,lonf15,cmap=cm_oc.cm.turbid,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='k',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='k',zorder=1)
			#add the colorbar
			cax4.set_clim(Lon[0],Lon[1])
			cbar4=fig4.colorbar(cax4, orientation='vertical',shrink=0.9)
			cbar4.ax.set_ylabel('Longitude origin (15d) [$^\circ$]')
			#add the title
			
			filefig4=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig4)	


		if ii==4:
			latf15=variables['latf15']
			fig5=plt.figure()
			cax5=mymap.pcolormesh(x,y,latf15,cmap=cm_oc.cm.dense,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='w',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='w',zorder=1)
			#add the colorbar
			cax5.set_clim(Lat[0],Lat[1])
			cbar5=fig5.colorbar(cax5, orientation='vertical',shrink=0.9)
			cbar5.ax.set_ylabel('Latitude origin (15d) [$^\circ$]')
			#add the title
			
			filefig5=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig5)	

		if ii==5:
			Ucms=variables['Ucms']
			Vcms=variables['Vcms']
			fig6=plt.figure()
			cax6=mymap.pcolormesh(x,y,Ucms**2+Vcms**2,cmap=cm_oc.cm.thermal,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='w',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='w',zorder=1)
			#add the colorbar
			cax6.set_clim(0,300)
			cbar6=fig6.colorbar(cax6, orientation='vertical',shrink=0.9)
			cbar6.ax.set_ylabel('Kinetic Energy [$cm^2/s^2$]')
			#add the title
			
			filefig6=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig6)
			
		if ii==6:
			touched=variables['touched']
			fig7=plt.figure()
			cax7=mymap.pcolormesh(x,y,touched,cmap=cm_oc.cm.deep,zorder=-1)
			#add the coastline (data from Basemap)
			mymap.drawcoastlines()	
			#define the tick and the grid (done for global)
			myparallels=range(-90,90+1,1)#from sotuh pole to nortehn pole with a resolution of 1 degree
			mymeridians = range(-180,180+1,1)
			#draw the ticks labels
			mymap.drawparallels(myparallels,labels=[1,0,0,0],fontsize=10)
			mymap.drawmeridians(mymeridians,labels=[0,0,0,1],fontsize=10)
			#draw the continent (data from Basemap)
			mymap.fillcontinents(color='0.6',lake_color='0.6',zorder=100)
			#draw the stations
			mymap.scatter(x_stations,y_stations,s=15,color='m',zorder=1)	
			#draw the waypoint
			mymap.plot(x_waypoint,y_waypoint,color='m',zorder=1)
			#add the colorbar
			cax7.set_clim(0,15)
			cbar7=fig7.colorbar(cax7, orientation='vertical',shrink=0.9)
			cbar7.ax.set_ylabel('Time from bathymetry [d]')
			#add the title
			
			filefig7=dir_wrk+'/'+figure_labels[ii]+'_'+filefigbase+'.png'
			plt.title(figure_labels[ii]+'_'+filefigbase)
			plt.savefig(filefig7)		
   		


